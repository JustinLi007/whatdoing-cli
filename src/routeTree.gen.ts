/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ContentsContentIdImport } from './routes/contents/$contentId'

// Create Virtual Routes

const NewContentLazyImport = createFileRoute('/new-content')()
const IndexLazyImport = createFileRoute('/')()
const SignupIndexLazyImport = createFileRoute('/signup/')()
const LoginIndexLazyImport = createFileRoute('/login/')()
const DataIndexLazyImport = createFileRoute('/data/')()
const ContentsIndexLazyImport = createFileRoute('/contents/')()
const HomeUserIdLazyImport = createFileRoute('/home/$userId')()
const EditContentIdLazyImport = createFileRoute('/edit/$contentId')()
const EditNewIndexLazyImport = createFileRoute('/edit/new/')()

// Create/Update Routes

const NewContentLazyRoute = NewContentLazyImport.update({
  id: '/new-content',
  path: '/new-content',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/new-content.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const SignupIndexLazyRoute = SignupIndexLazyImport.update({
  id: '/signup/',
  path: '/signup/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/signup/index.lazy').then((d) => d.Route))

const LoginIndexLazyRoute = LoginIndexLazyImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login/index.lazy').then((d) => d.Route))

const DataIndexLazyRoute = DataIndexLazyImport.update({
  id: '/data/',
  path: '/data/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/data/index.lazy').then((d) => d.Route))

const ContentsIndexLazyRoute = ContentsIndexLazyImport.update({
  id: '/contents/',
  path: '/contents/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/contents/index.lazy').then((d) => d.Route),
)

const HomeUserIdLazyRoute = HomeUserIdLazyImport.update({
  id: '/home/$userId',
  path: '/home/$userId',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/home/$userId.lazy').then((d) => d.Route))

const EditContentIdLazyRoute = EditContentIdLazyImport.update({
  id: '/edit/$contentId',
  path: '/edit/$contentId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/edit/$contentId.lazy').then((d) => d.Route),
)

const ContentsContentIdRoute = ContentsContentIdImport.update({
  id: '/contents/$contentId',
  path: '/contents/$contentId',
  getParentRoute: () => rootRoute,
} as any)

const EditNewIndexLazyRoute = EditNewIndexLazyImport.update({
  id: '/edit/new/',
  path: '/edit/new/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/edit/new/index.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/new-content': {
      id: '/new-content'
      path: '/new-content'
      fullPath: '/new-content'
      preLoaderRoute: typeof NewContentLazyImport
      parentRoute: typeof rootRoute
    }
    '/contents/$contentId': {
      id: '/contents/$contentId'
      path: '/contents/$contentId'
      fullPath: '/contents/$contentId'
      preLoaderRoute: typeof ContentsContentIdImport
      parentRoute: typeof rootRoute
    }
    '/edit/$contentId': {
      id: '/edit/$contentId'
      path: '/edit/$contentId'
      fullPath: '/edit/$contentId'
      preLoaderRoute: typeof EditContentIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/home/$userId': {
      id: '/home/$userId'
      path: '/home/$userId'
      fullPath: '/home/$userId'
      preLoaderRoute: typeof HomeUserIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/contents/': {
      id: '/contents/'
      path: '/contents'
      fullPath: '/contents'
      preLoaderRoute: typeof ContentsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/data/': {
      id: '/data/'
      path: '/data'
      fullPath: '/data'
      preLoaderRoute: typeof DataIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/signup/': {
      id: '/signup/'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/edit/new/': {
      id: '/edit/new/'
      path: '/edit/new'
      fullPath: '/edit/new'
      preLoaderRoute: typeof EditNewIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/new-content': typeof NewContentLazyRoute
  '/contents/$contentId': typeof ContentsContentIdRoute
  '/edit/$contentId': typeof EditContentIdLazyRoute
  '/home/$userId': typeof HomeUserIdLazyRoute
  '/contents': typeof ContentsIndexLazyRoute
  '/data': typeof DataIndexLazyRoute
  '/login': typeof LoginIndexLazyRoute
  '/signup': typeof SignupIndexLazyRoute
  '/edit/new': typeof EditNewIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/new-content': typeof NewContentLazyRoute
  '/contents/$contentId': typeof ContentsContentIdRoute
  '/edit/$contentId': typeof EditContentIdLazyRoute
  '/home/$userId': typeof HomeUserIdLazyRoute
  '/contents': typeof ContentsIndexLazyRoute
  '/data': typeof DataIndexLazyRoute
  '/login': typeof LoginIndexLazyRoute
  '/signup': typeof SignupIndexLazyRoute
  '/edit/new': typeof EditNewIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/new-content': typeof NewContentLazyRoute
  '/contents/$contentId': typeof ContentsContentIdRoute
  '/edit/$contentId': typeof EditContentIdLazyRoute
  '/home/$userId': typeof HomeUserIdLazyRoute
  '/contents/': typeof ContentsIndexLazyRoute
  '/data/': typeof DataIndexLazyRoute
  '/login/': typeof LoginIndexLazyRoute
  '/signup/': typeof SignupIndexLazyRoute
  '/edit/new/': typeof EditNewIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/new-content'
    | '/contents/$contentId'
    | '/edit/$contentId'
    | '/home/$userId'
    | '/contents'
    | '/data'
    | '/login'
    | '/signup'
    | '/edit/new'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/new-content'
    | '/contents/$contentId'
    | '/edit/$contentId'
    | '/home/$userId'
    | '/contents'
    | '/data'
    | '/login'
    | '/signup'
    | '/edit/new'
  id:
    | '__root__'
    | '/'
    | '/new-content'
    | '/contents/$contentId'
    | '/edit/$contentId'
    | '/home/$userId'
    | '/contents/'
    | '/data/'
    | '/login/'
    | '/signup/'
    | '/edit/new/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  NewContentLazyRoute: typeof NewContentLazyRoute
  ContentsContentIdRoute: typeof ContentsContentIdRoute
  EditContentIdLazyRoute: typeof EditContentIdLazyRoute
  HomeUserIdLazyRoute: typeof HomeUserIdLazyRoute
  ContentsIndexLazyRoute: typeof ContentsIndexLazyRoute
  DataIndexLazyRoute: typeof DataIndexLazyRoute
  LoginIndexLazyRoute: typeof LoginIndexLazyRoute
  SignupIndexLazyRoute: typeof SignupIndexLazyRoute
  EditNewIndexLazyRoute: typeof EditNewIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  NewContentLazyRoute: NewContentLazyRoute,
  ContentsContentIdRoute: ContentsContentIdRoute,
  EditContentIdLazyRoute: EditContentIdLazyRoute,
  HomeUserIdLazyRoute: HomeUserIdLazyRoute,
  ContentsIndexLazyRoute: ContentsIndexLazyRoute,
  DataIndexLazyRoute: DataIndexLazyRoute,
  LoginIndexLazyRoute: LoginIndexLazyRoute,
  SignupIndexLazyRoute: SignupIndexLazyRoute,
  EditNewIndexLazyRoute: EditNewIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/new-content",
        "/contents/$contentId",
        "/edit/$contentId",
        "/home/$userId",
        "/contents/",
        "/data/",
        "/login/",
        "/signup/",
        "/edit/new/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/new-content": {
      "filePath": "new-content.lazy.tsx"
    },
    "/contents/$contentId": {
      "filePath": "contents/$contentId.tsx"
    },
    "/edit/$contentId": {
      "filePath": "edit/$contentId.lazy.tsx"
    },
    "/home/$userId": {
      "filePath": "home/$userId.lazy.tsx"
    },
    "/contents/": {
      "filePath": "contents/index.lazy.tsx"
    },
    "/data/": {
      "filePath": "data/index.lazy.tsx"
    },
    "/login/": {
      "filePath": "login/index.lazy.tsx"
    },
    "/signup/": {
      "filePath": "signup/index.lazy.tsx"
    },
    "/edit/new/": {
      "filePath": "edit/new/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
